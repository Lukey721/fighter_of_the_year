name: Build and Push to Docker Hub

on:
  push:
    branches: [ "master" ]

jobs:
  docker-build-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set version tag using timestamp
      id: vars
      run: echo "VERSION=$(date +%s)" >> "$GITHUB_ENV"

    - name: Save version tag to artifact
      run: echo "${{ env.VERSION }}" > version.txt
    
    - name: Upload version artifact
      uses: actions/upload-artifact@v4
      with:
        name: version-tag
        path: version.txt

    # Build user-api image (no push yet)
    - name: Build user-api
      id: build_user_api
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_USER_IMAGE_NAME }}:${{ env.VERSION }} ./${{ secrets.USER_CONTEXT }}

    # Build voting-api image (no push yet)
    - name: Build voting-api
      id: build_voting_api
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_VOTING_IMAGE_NAME }}:${{ env.VERSION }} ./${{ secrets.VOTING_CONTEXT }}

    # Build frontend image (no push yet)
    - name: Build frontend-blue
      id: build_frontend_blue
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:blue${{ env.VERSION }} ./${{ secrets.FRONTEND_CONTEXT }}

    # Build frontend image (no push yet)
    - name: Build frontend-green
      id: build_frontend_green
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:green${{ env.VERSION }} ./${{ secrets.FRONTEND_CONTEXT }}

    # Isntall Trivy for vulnerability scanning
    - name: Install Trivy for vulnerability scanning
      run: |
        curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.tar.gz | tar -xzv
        sudo mv trivy /usr/local/bin/

    # Scan the user-api Docker image for vulnerabilities
    - name: Scan Docker image with Trivy - User api
      run: trivy image --exit-code 0 --no-progress --format json ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_USER_IMAGE_NAME }}:${{ env.VERSION }} > user-api-trivy-report.json

    # Upload the user Trivy scan report as an artifact
    - name: Upload Trivy scan report as artifact - User api
      uses: actions/upload-artifact@v4
      with:
        name: user-api-trivy-report
        path: user-api-trivy-report.json

    # Scan the voting-api Docker image for vulnerabilities
    - name: Scan Docker image with Trivy - Voting api
      run: trivy image --exit-code 0 --no-progress --format json ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_VOTING_IMAGE_NAME }}:${{ env.VERSION }} > voting-api-trivy-report.json

    # Upload the voting Trivy scan report as an artifact
    - name: Upload Trivy scan report as artifact - Voting api
      uses: actions/upload-artifact@v4
      with:
        name: voting-api-trivy-report
        path: voting-api-trivy-report.json

    # Scan the frontend Docker image for vulnerabilities
    - name: Scan Docker image with Trivy - Frontend blue
      run: trivy image --exit-code 0 --no-progress --format json ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:blue${{ env.VERSION }} > frontend-blue-trivy-report.json

    # Upload the frontend Trivy scan report as an artifact
    - name: Upload Trivy scan report as artifact - Frontend blue
      uses: actions/upload-artifact@v4
      with:
        name: frontend-blue-trivy-report
        path: frontend-blue-trivy-report.json

    # Scan the frontend Docker image for vulnerabilities
    - name: Scan Docker image with Trivy - Frontend green
      run: trivy image --exit-code 0 --no-progress --format json ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:green${{ env.VERSION }} > frontend-green-trivy-report.json

    # Upload the frontend Trivy scan report as an artifact
    - name: Upload Trivy scan report as artifact - Frontend green
      uses: actions/upload-artifact@v4
      with:
        name: frontend-green-trivy-report
        path: frontend-green-trivy-report.json

    # Push the user-api image to Docker Hub
    - name: Push user-api Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_USER_IMAGE_NAME }}:${{ env.VERSION }}

    # Push the voting-api image to Docker Hub
    - name: Push voting-api Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_VOTING_IMAGE_NAME }}:${{ env.VERSION }}

    # Push the blue frontend image to Docker Hub
    - name: Push frontend blue Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:blue${{ env.VERSION }}

    # Push the green frontend image to Docker Hub
    - name: Push frontend green Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:green${{ env.VERSION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Generate terraform.tfvars
      run: |
        echo "user_api_image = \"${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_USER_IMAGE_NAME }}:${{ env.VERSION }}\"" > terraform.tfvars
        echo "voting_api_image = \"${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_VOTING_IMAGE_NAME }}:${{ env.VERSION }}\"" >> terraform.tfvars
        echo "frontend_blue_image = \"${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:blue${{ env.VERSION }}\"" >> terraform.tfvars
        echo "frontend_green_image = \"${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:green${{ env.VERSION }}\"" >> terraform.tfvars

    - name: Print .tfvars
      run: cat terraform.tfvars

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Apply
      run: terraform apply -auto-approve -var-file="terraform.tfvars"