name: Deploy Workflow

permissions:
  contents: write

defaults:
  run:
    shell: bash

on:
  push:
    branches: [ "master", "testing" ]
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy the infrastructure?'
        required: false
        default: 'false'
      rollback_version:
        description: 'Version to rollback to (leave blank to deploy new)'
        required: false
        default: ''

env:
  DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
  USER_IMAGE: ${{ secrets.DOCKER_USER_IMAGE_NAME }}
  VOTING_IMAGE: ${{ secrets.DOCKER_VOTING_IMAGE_NAME }}
  FRONTEND_IMAGE: ${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}


jobs:
  docker-build-push:
    runs-on: self-hosted
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0   # rebase later

    - name: Check Bash availability
      run: |
          echo "Running shell: $SHELL"
          bash --version

    - name: Notify Slack of workflow started 
      if: always()
      shell: 'C:\Program Files\Git\usr\bin\bash.exe'
      run: |
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \" *Deployment Started*\n*Workflow:* ${{ github.workflow }}\n*Branch:* ${{ github.ref_name }}\n*Initiated by:* ${{ github.actor }}\n*Rollback:* ${{ github.event.inputs.rollback_version != '' && 'Yes' || 'No' }}\n*Destroy:* ${{ github.event.inputs.destroy == 'true' && 'Yes' || 'No' }}\"
          }" ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Set up Git authentication
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set version tag using timestamp
      id: vars
      run: echo "VERSION=$(date +%s)" >> "$GITHUB_ENV"

    - name: Save version tag to artifact
      run: echo "${{ env.VERSION }}" > version.txt
    
    - name: Upload version artifact
      uses: actions/upload-artifact@v4
      with:
        name: version-tag
        path: version.txt

    - name: Save current version to tracked file
      run: echo "${{ env.VERSION }}" > ./terraform/last_version.txt
      
    - name: Git pull version file
      if: github.event.inputs.rollback_version == ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git stash --include-untracked
          git pull --rebase origin testing
          git stash pop || echo "No stash to apply"
    
    - name: Save and commit version info
      if: github.event.inputs.rollback_version == ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "${{ env.VERSION }}" > ./terraform/last_version.txt
        git add -f ./terraform/last_version.txt
        git commit -m "Track last deployed version: ${{ env.VERSION }}" || echo "Nothing to commit"
        git push origin testing

      # Execute the rollback
    - name: Override version for rollback if specified
      if: github.event.inputs.rollback_version != ''
      run: |
          echo "ROLLBACK VERSION SELECTED: ${{ github.event.inputs.rollback_version }}"
          echo "VERSION=${{ github.event.inputs.rollback_version }}" >> "$GITHUB_ENV"

    # Build user-api image (no push yet)
    - name: Build user-api
      if: github.event.inputs.rollback_version == ''
      id: build_user_api
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_USER_IMAGE_NAME }}:${{ env.VERSION }} ./${{ secrets.USER_CONTEXT }}

    # Build voting-api image (no push yet)
    - name: Build voting-api
      if: github.event.inputs.rollback_version == ''
      id: build_voting_api
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_VOTING_IMAGE_NAME }}:${{ env.VERSION }} ./${{ secrets.VOTING_CONTEXT }}

    # Build frontend image (no push yet)
    - name: Build frontend-blue
      if: github.event.inputs.rollback_version == ''
      id: build_frontend_blue
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:blue${{ env.VERSION }} ./${{ secrets.FRONTEND_CONTEXT }}

    # Build frontend image (no push yet)
    - name: Build frontend-green
      if: github.event.inputs.rollback_version == ''
      id: build_frontend_green
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:green${{ env.VERSION }} ./${{ secrets.FRONTEND_CONTEXT }}

    # Install Trivy for vulnerability scanning
    - name: Install Trivy for vulnerability scanning
      if: github.event.inputs.rollback_version == ''
      run: |
        curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.tar.gz | tar -xzv
        sudo mv trivy /usr/local/bin/

    # Scan the user-api Docker image for vulnerabilities
    - name: Scan Docker image with Trivy - User api
      if: github.event.inputs.rollback_version == ''
      run: trivy image --exit-code 0 --no-progress --format json ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_USER_IMAGE_NAME }}:${{ env.VERSION }} > user-api-trivy-report.json

    # Upload the user Trivy scan report as an artifact
    - name: Upload Trivy scan report as artifact - User api
      if: github.event.inputs.rollback_version == ''
      uses: actions/upload-artifact@v4
      with:
        name: user-api-trivy-report
        path: user-api-trivy-report.json

    # Scan the voting-api Docker image for vulnerabilities
    - name: Scan Docker image with Trivy - Voting api
      if: github.event.inputs.rollback_version == ''
      run: trivy image --exit-code 0 --no-progress --format json ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_VOTING_IMAGE_NAME }}:${{ env.VERSION }} > voting-api-trivy-report.json

    # Upload the voting Trivy scan report as an artifact
    - name: Upload Trivy scan report as artifact - Voting api
      if: github.event.inputs.rollback_version == ''
      uses: actions/upload-artifact@v4
      with:
        name: voting-api-trivy-report
        path: voting-api-trivy-report.json

    # Scan the frontend Docker image for vulnerabilities
    - name: Scan Docker image with Trivy - Frontend blue
      if: github.event.inputs.rollback_version == ''
      run: trivy image --exit-code 0 --no-progress --format json ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:blue${{ env.VERSION }} > frontend-blue-trivy-report.json

    # Upload the frontend Trivy scan report as an artifact
    - name: Upload Trivy scan report as artifact - Frontend blue
      if: github.event.inputs.rollback_version == ''
      uses: actions/upload-artifact@v4
      with:
        name: frontend-blue-trivy-report
        path: frontend-blue-trivy-report.json

    # Scan the frontend Docker image for vulnerabilities
    - name: Scan Docker image with Trivy - Frontend green
      if: github.event.inputs.rollback_version == ''
      run: trivy image --exit-code 0 --no-progress --format json ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:green${{ env.VERSION }} > frontend-green-trivy-report.json

    # Upload the frontend Trivy scan report as an artifact
    - name: Upload Trivy scan report as artifact - Frontend green
      if: github.event.inputs.rollback_version == ''
      uses: actions/upload-artifact@v4
      with:
        name: frontend-green-trivy-report
        path: frontend-green-trivy-report.json

    # Push the user-api image to Docker Hub
    - name: Push user-api Docker image to Docker Hub
      if: github.event.inputs.rollback_version == ''
      run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_USER_IMAGE_NAME }}:${{ env.VERSION }}

    # Push the voting-api image to Docker Hub
    - name: Push voting-api Docker image to Docker Hub
      if: github.event.inputs.rollback_version == ''
      run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_VOTING_IMAGE_NAME }}:${{ env.VERSION }}

    # Push the blue frontend image to Docker Hub
    - name: Push frontend blue Docker image to Docker Hub
      if: github.event.inputs.rollback_version == ''
      run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:blue${{ env.VERSION }}

    # Push the green frontend image to Docker Hub
    - name: Push frontend green Docker image to Docker Hub
      if: github.event.inputs.rollback_version == ''
      run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_FRONTEND_IMAGE_NAME }}:green${{ env.VERSION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

      # allow scaling based on peak hours
    - name: Determine user-api replica count based on time of day
      run: |
        HOUR=$(date +%H)
        if [ "$HOUR" -ge 12 ] && [ "$HOUR" -le 20 ]; then
          echo "Peak hours – using 3 replicas"
          REPLICAS=3
        else
          echo "Off-peak – using 1 replica"
          REPLICAS=1
        fi
        echo "REPLICAS=$REPLICAS" >> $GITHUB_ENV

    - name: Determine next active colour (blue/green)
      id: colour
      run: |
          if [ -f .env ]; then
            CURRENT_COLOR=$(grep -E '^ACTIVE_COLOR=' .env | cut -d'=' -f2)
          fi
      
          if [ -z "$CURRENT_COLOR" ]; then
            CURRENT_COLOR="blue"
          fi
      
          if [ "$CURRENT_COLOR" = "blue" ]; then
            NEW_COLOR="green"
          else
            NEW_COLOR="blue"
          fi
      
          echo "CURRENT_COLOR=$CURRENT_COLOR" >> $GITHUB_ENV
          echo "NEW_COLOR=$NEW_COLOR" >> $GITHUB_ENV

    # Update .env file with new version and colour and replicas
    - name: Update .env file
      run: |
         sed -i "s/^VERSION=.*/VERSION=${VERSION}/" .env || echo "VERSION=${VERSION}" >> .env
         sed -i "s/^REPLICAS=.*/REPLICAS=${REPLICAS}/" .env || echo "REPLICAS=${REPLICAS}" >> .env
         sed -i "s/^ACTIVE_COLOR=.*/ACTIVE_COLOR=${NEW_COLOR}/" .env || echo "ACTIVE_COLOR=${NEW_COLOR}" >> .env

    - name: Commit and push .env
      if: github.event.inputs.rollback_version == ''
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          git add -f .env
          git commit -m "ci: update .env (version=${{ env.VERSION }}, colour=${{ env.NEW_COLOR }}) [skip ci]" || echo "Nothing to commit"
          git push origin testing
  
      # infra baseline setup
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

     # This is a step to destroy the infrastructure - ensure idempotency
    - name: Terraform Destroy 
      if: github.event.inputs.destroy == 'true'
      working-directory: ./terraform
      run: terraform destroy -auto-approve

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve
    
    # Pull docker image for K6
    - name: Pull Docker image for K6
      run: docker pull grafana/k6
   
    # Run K6 script
    - name: Run K6 Load Test
      run: |
        docker run -i --rm \
          -v ${{ github.workspace }}/K6tests:/tests \
          grafana/k6 run /tests/perf_tests2.js > k6report.txt

    # Upload k6 report as an artifact
    - name: Upload K6 Report
      uses: actions/upload-artifact@v4
      with:
        name: k6report
        path: k6report.txt

    - name: Deploy to Docker Swarm
      run: |
          docker stack deploy \
            --with-registry-auth \
            --compose-file docker-stack.yml \
            myapp
    
    - name: Notify Slack of finished deployment
      if: github.event.inputs.rollback_version == ''
      run: |
        curl -X POST -H 'Content-type: application/json' --data "{
        \"text\": \"*Deployment Finished Notification*\n*Workflow:* ${{ github.workflow }}\n*Status:* ${{ job.status }}\n*Branch:* ${{ github.ref_name }}\n*Initiated by:* ${{ github.actor }}\n*Version:* ${{ env.VERSION }}\"
        }" ${{ secrets.SLACK_WEBHOOK_URL }}
